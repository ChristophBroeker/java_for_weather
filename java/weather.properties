# weather properties

# used by polling, graphing
#
# IMPORTANT: be sure any jdbc drivers are in the client's classpath
#

weather.metric=false
# properties for j2ee-based db connections
weather.db.j2ee.providerUrl=t3://192.168.1.2:8080
weather.db.j2ee.poolName=weblogic.jdbc.jts.postgresPool
# user name and password for the app server
weather.db.j2ee.userName=tom
weather.db.j2ee.password=tompassword#99
# specific to the app server
weather.db.j2ee.contextFactory=weblogic.jndi.WLInitialContextFactory


# properties for jdbc-based db connections
weather.db.jdbc.driver=com.mysql.jdbc.Driver

weather.db.jdbc.url=jdbc:mysql://192.168.1.10/newWeather?autoReconnect=true

#weather.db.jdbc.url=jdbc:mysql://haena/weather?user=tom&password=thr#at99&autoReconnect=true
# user name and password for the db
weather.db.jdbc.user=wx
weather.db.jdbc.password=wx

weather.db.tableName=weathersnapshots
# for sql queries
weather.db.dateFormat=yyyy-MM-dd HH:mm:ss
weather.db.timeZone=America/New York

# what to put in the 'location' column in the db (weathersnapshots.location)
weather.db.location=01915

# what class to use to get connections for archive entries and time periods
#weather.db.sql.class=org.tom.weather.postgres.PostgresJ2eeHelper
weather.db.sql.class=org.tom.weather.mysql.MySqlJdbcHelper
#weather.db.sql.class=org.tom.weather.jini.JiniPostgresJdbcHelper

# what class to use to get connections to build graphs
weather.db.graph.sql.class=org.tom.weather.mysql.MySqlJdbcHelper

# whether to query db and write PeriodHistory objects to someplace
weather.info.writeToContext=true

# which implementation of org.tom.weather.posting.DataPoster to instantiate

# writes to servlet context only
# weather.info.persistence.delegate=org.tom.weather.posting.ServletContextDataPosterImpl
# if writeToContext is true and the impl uses a servlet context,
#   where is org.tom.weather.ReceiveServlet running
#weather.receiveServlet.url=http://192.168.1.2:8080/receive

#,http://kalalau:7001/weather/receive

#weather.receiveServlet.username=system
#weather.receiveServlet.password=weblogic

#weather.info.persistence.delegate.1=org.tom.weather.posting.ServletContextDataPosterImpl
#weather.info.persistence.delegate.2=org.tom.weather.posting.JmsDataPosterImpl
weather.info.persistence.delegate.1=org.tom.weather.posting.CoherenceDataPosterImpl

#weather.info.persistence.delegate.2=org.tom.weather.posting.JavaSpaceDataPosterImpl
#weather.info.persistence.delegate.3=org.tom.weather.posting.TSpaceDataPosterImpl

weather.debugOutput=true

#weather.info.spaceHost=haena
#weather.info.spaceName=WeatherSpace

# hanalei
#weather.info.jini.tranHost=jini://hanalei.tom.org
#weather.info.jini.javaSpaceHost=jini://hanalei.tom.org
#weather.info.jini.spaceName=WeatherSpace

# haena
#weather.info.jini.tranHost=jini://haena.tom.org
#weather.info.jini.javaSpaceHost=jini://haena.tom.org
#weather.info.jini.spaceName=WeatherSpace

# class to use to populate PeriodHistory objects
# this class actually does the db work, needs to implement PeriodHistoryDelegate
weather.history.persistenceDelegate=org.tom.weather.mysql.MySqlPeriodHistoryDelegate

# not used yet - assumed some "context" object can exist and hold this stuff for presentation
weather.station.elevation=
weather.station.comment=

# serial port to find station
weather.station.port=/dev/ttyS99

# whether to send the system time to the weather console
#weather.station.stationtime.sync=true
weather.station.stationtime.sync=false

# whether to poll, write to db, and erase archive memory
weather.station.useArchiveMemory=false

# for wunderground.com
weather.wunderground.enable=false
weather.wunderground.uploadUrl=http://weatherstation.wunderground.com/weatherstation/updateweatherstation.php
weather.wunderground.user=KMABEVER3
weather.wunderground.password=wx2005-wrong
weather.wunderground.interval=5

# aprswxnet
weather.aprswxnet.enable=false
weather.aprswxnet.station=CW0169
weather.aprswxnet.host=second.aprs.net
weather.aprswxnet.port=23
weather.aprswxnet.interval=5
weather.station.latitude=4233.44N
weather.station.longitude=07051.01W
weather.aprswxnet.equipment=Davis-WMII


# How long, in seconds before the in-memory
# PeriodData objects expire and the thread
# for that period wakes up to refresh the data.
# Use -1 for time periods in the past -
# they will automatically
# expire at the end of that Period and refresh.
#
# use 0 to skip that period.
#
# Tune to taste - trade off data currency
#   against database performance
#

weather.history.refresh.thisHour=60
weather.history.refresh.lastHour=-1
weather.history.refresh.today=90
weather.history.refresh.yesterday=-1
weather.history.refresh.thisWeek=1800
weather.history.refresh.lastWeek=-1
weather.history.refresh.thisMonth=1800
weather.history.refresh.lastMonth=-1
weather.history.refresh.thisSeason=3000
weather.history.refresh.lastSeason=-1
weather.history.refresh.thisYear=10000
weather.history.refresh.lastYear=-1
weather.history.refresh.forever=0

#weather.history.refresh.thisHour=0
#weather.history.refresh.lastHour=0
#weather.history.refresh.today=0
#weather.history.refresh.yesterday=0
#weather.history.refresh.thisWeek=0
#weather.history.refresh.lastWeek=0
#weather.history.refresh.thisMonth=0
#weather.history.refresh.lastMonth=0
#weather.history.refresh.thisSeason=0
#weather.history.refresh.lastSeason=0
#weather.history.refresh.thisYear=0
#weather.history.refresh.lastYear=0
#weather.history.refresh.forever=0

weather.poster.jms.enable=false
weather.poster.jms.contextfactory=weblogic.jndi.WLInitialContextFactory
weather.poster.jms.url=t3://kalalau:7001
weather.poster.jms.user=system
weather.poster.jms.password=weblogic
weather.poster.jms.connectionfactory=weatherCF
weather.poster.jms.snapshot.topic=SnapShotTopic
weather.poster.jms.archiveentry.queue=ArchiveEntryQueue

log4jPropertiesRefreshSeconds=60
log4jProperties=file:///C:/dev/personal/weather/weather.properties

